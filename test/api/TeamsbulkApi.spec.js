/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendXAppServerV2.TeamsbulkApi();
  });

  describe('(package)', function() {
    describe('TeamsbulkApi', function() {
      describe('teamBulkActionRouterCreateBulkAction', function() {
        it('should call teamBulkActionRouterCreateBulkAction successfully', function(done) {
          // TODO: uncomment, update parameter values for teamBulkActionRouterCreateBulkAction call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var body = new SendXAppServerV2.ModelsBulkRequest();
          body.bulkAction = [new SendXAppServerV2.ModelsBulkActionRequest()];
          body.bulkAction[0].metaData = "";
          body.bulkAction[0].type = "0";
          body.bulkTrigger = [new SendXAppServerV2.ModelsBulkTriggerRequest()];
          body.bulkTrigger[0].metaData = "";
          body.bulkTrigger[0].type = "";
          body.name = "";

          instance.teamBulkActionRouterCreateBulkAction(xTeamApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsBulk);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamBulkActionRouterGetAllBulkAction', function() {
        it('should call teamBulkActionRouterGetAllBulkAction successfully', function(done) {
          // TODO: uncomment, update parameter values for teamBulkActionRouterGetAllBulkAction call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var opts = {};
          opts.offset = 789;
          opts.limit = 789;
          opts.search = "search_example";

          instance.teamBulkActionRouterGetAllBulkAction(xTeamApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendXAppServerV2.ModelsDeepTeamBulk);
              {
                let dataCtr = data.actions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendXAppServerV2.ModelsBulkAction);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.metadata).to.be.a('string');
                  expect(data.metadata).to.be("");
                  expect(data.type).to.be.a(SendXAppServerV2.ModelsBulkActionType);
          
  
                        }
              }
              expect(data._date).to.be.a('string');
              expect(data._date).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.status).to.be.a('boolean');
              expect(data.status).to.be(false);
              {
                let dataCtr = data.triggers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendXAppServerV2.ModelsBulkTrigger);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.metadata).to.be.a('string');
                  expect(data.metadata).to.be("");
                  expect(data.type).to.be.a(SendXAppServerV2.ModelsBulkTriggerType);
          
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamBulkActionRouterGetBulkAction', function() {
        it('should call teamBulkActionRouterGetBulkAction successfully', function(done) {
          // TODO: uncomment, update parameter values for teamBulkActionRouterGetBulkAction call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var bulkActionId = 789;

          instance.teamBulkActionRouterGetBulkAction(xTeamApiKey, bulkActionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsDeepTeamAutomation);
            {
              let dataCtr = data.actions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendXAppServerV2.ModelsAutomationAction);
                expect(data.durationType).to.be.a(SendXAppServerV2.ModelsAutomationActionDurationType);
                    expect(data.durationValue).to.be.a('number');
                expect(data.durationValue).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.metaData).to.be.a('string');
                expect(data.metaData).to.be("");
                expect(data.metaDataElementWrapper).to.be.a(SendXAppServerV2.ModelsSelect2ElementWrapper);
                      expect(data.metaDataElementWrapper.id).to.be.a('string');
                  expect(data.metaDataElementWrapper.id).to.be("");
                  expect(data.metaDataElementWrapper.text).to.be.a('string');
                  expect(data.metaDataElementWrapper.text).to.be("");
                expect(data.provider).to.be.a(SendXAppServerV2.ModelsIntegrationType);
                    expect(data.type).to.be.a(SendXAppServerV2.ModelsAutomationActionType);
        

                      }
            }
            expect(data._date).to.be.a('string');
            expect(data._date).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.status).to.be.a('boolean');
            expect(data.status).to.be(false);
            {
              let dataCtr = data.triggers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendXAppServerV2.ModelsAutomationTrigger);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.metaData).to.be.a('string');
                expect(data.metaData).to.be("");
                expect(data.metaDataElementWrapper).to.be.a(SendXAppServerV2.ModelsSelect2ElementWrapper);
                      expect(data.metaDataElementWrapper.id).to.be.a('string');
                  expect(data.metaDataElementWrapper.id).to.be("");
                  expect(data.metaDataElementWrapper.text).to.be.a('string');
                  expect(data.metaDataElementWrapper.text).to.be("");
                expect(data.pageSourceType).to.be.a(SendXAppServerV2.ModelsAutomationTriggerPageSourceType);
                    expect(data.pageSourceValue).to.be.a('string');
                expect(data.pageSourceValue).to.be("");
                expect(data.provider).to.be.a(SendXAppServerV2.ModelsIntegrationType);
                    expect(data.triggerForExisting).to.be.a('boolean');
                expect(data.triggerForExisting).to.be(false);
                expect(data.type).to.be.a(SendXAppServerV2.ModelsAutomationTriggerType);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
