/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendXAppServerV2.TeamstagApi();
  });

  describe('(package)', function() {
    describe('TeamstagApi', function() {
      describe('teamTagRouterCreate', function() {
        it('should call teamTagRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for teamTagRouterCreate call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var body = new SendXAppServerV2.ModelsTag();
          body.id = "0";
          body.name = "";

          instance.teamTagRouterCreate(xTeamApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsTag);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamTagRouterDeleteTag', function() {
        it('should call teamTagRouterDeleteTag successfully', function(done) {
          // TODO: uncomment, update parameter values for teamTagRouterDeleteTag call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var tagId = 789;

          instance.teamTagRouterDeleteTag(xTeamApiKey, tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsDeleteResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamTagRouterGetAllTags', function() {
        it('should call teamTagRouterGetAllTags successfully', function(done) {
          // TODO: uncomment, update parameter values for teamTagRouterGetAllTags call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var opts = {};
          opts.offset = 789;
          opts.limit = 789;
          opts.search = "search_example";

          instance.teamTagRouterGetAllTags(xTeamApiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendXAppServerV2.ModelsTag);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamTagRouterGetTag', function() {
        it('should call teamTagRouterGetTag successfully', function(done) {
          // TODO: uncomment, update parameter values for teamTagRouterGetTag call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var tagId = 789;

          instance.teamTagRouterGetTag(xTeamApiKey, tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsTag);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamTagRouterUpdateTag', function() {
        it('should call teamTagRouterUpdateTag successfully', function(done) {
          // TODO: uncomment, update parameter values for teamTagRouterUpdateTag call and complete the assertions
          /*
          var xTeamApiKey = "xTeamApiKey_example";
          var tagId = 789;

          instance.teamTagRouterUpdateTag(xTeamApiKey, tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendXAppServerV2.ModelsTag);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
