/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsDripRequest', function() {
      beforeEach(function() {
        instance = new SendXAppServerV2.ModelsDripRequest();
      });

      it('should create an instance of ModelsDripRequest', function() {
        // TODO: update the code to test ModelsDripRequest
        expect(instance).to.be.a(SendXAppServerV2.ModelsDripRequest);
      });

      it('should have the property autogenerateUtm (base name: "autogenerateUtm")', function() {
        // TODO: update the code to test the property autogenerateUtm
        expect(instance).to.have.property('autogenerateUtm');
        // expect(instance.autogenerateUtm).to.be(expectedValueLiteral);
      });

      it('should have the property dripStep (base name: "dripStep")', function() {
        // TODO: update the code to test the property dripStep
        expect(instance).to.have.property('dripStep');
        // expect(instance.dripStep).to.be(expectedValueLiteral);
      });

      it('should have the property dripSteps (base name: "dripSteps")', function() {
        // TODO: update the code to test the property dripSteps
        expect(instance).to.have.property('dripSteps');
        // expect(instance.dripSteps).to.be(expectedValueLiteral);
      });

      it('should have the property fromEmail (base name: "fromEmail")', function() {
        // TODO: update the code to test the property fromEmail
        expect(instance).to.have.property('fromEmail');
        // expect(instance.fromEmail).to.be(expectedValueLiteral);
      });

      it('should have the property fromName (base name: "fromName")', function() {
        // TODO: update the code to test the property fromName
        expect(instance).to.have.property('fromName');
        // expect(instance.fromName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property sendInContactsTimezone (base name: "sendInContactsTimezone")', function() {
        // TODO: update the code to test the property sendInContactsTimezone
        expect(instance).to.have.property('sendInContactsTimezone');
        // expect(instance.sendInContactsTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property skipWeekends (base name: "skipWeekends")', function() {
        // TODO: update the code to test the property skipWeekends
        expect(instance).to.have.property('skipWeekends');
        // expect(instance.skipWeekends).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property timeCondition (base name: "timeCondition")', function() {
        // TODO: update the code to test the property timeCondition
        expect(instance).to.have.property('timeCondition');
        // expect(instance.timeCondition).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property trackReply (base name: "trackReply")', function() {
        // TODO: update the code to test the property trackReply
        expect(instance).to.have.property('trackReply');
        // expect(instance.trackReply).to.be(expectedValueLiteral);
      });

    });
  });

}));
