/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsCampaign', function() {
      beforeEach(function() {
        instance = new SendXAppServerV2.ModelsCampaign();
      });

      it('should create an instance of ModelsCampaign', function() {
        // TODO: update the code to test ModelsCampaign
        expect(instance).to.be.a(SendXAppServerV2.ModelsCampaign);
      });

      it('should have the property aBTestCampaign (base name: "aBTestCampaign")', function() {
        // TODO: update the code to test the property aBTestCampaign
        expect(instance).to.have.property('aBTestCampaign');
        // expect(instance.aBTestCampaign).to.be(expectedValueLiteral);
      });

      it('should have the property autodraftMetadata (base name: "autodraftMetadata")', function() {
        // TODO: update the code to test the property autodraftMetadata
        expect(instance).to.have.property('autodraftMetadata');
        // expect(instance.autodraftMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property autogeneratePlainText (base name: "autogeneratePlainText")', function() {
        // TODO: update the code to test the property autogeneratePlainText
        expect(instance).to.have.property('autogeneratePlainText');
        // expect(instance.autogeneratePlainText).to.be(expectedValueLiteral);
      });

      it('should have the property autogenerateUTM (base name: "autogenerateUTM")', function() {
        // TODO: update the code to test the property autogenerateUTM
        expect(instance).to.have.property('autogenerateUTM');
        // expect(instance.autogenerateUTM).to.be(expectedValueLiteral);
      });

      it('should have the property channel (base name: "channel")', function() {
        // TODO: update the code to test the property channel
        expect(instance).to.have.property('channel');
        // expect(instance.channel).to.be(expectedValueLiteral);
      });

      it('should have the property encryptedId (base name: "encryptedId")', function() {
        // TODO: update the code to test the property encryptedId
        expect(instance).to.have.property('encryptedId');
        // expect(instance.encryptedId).to.be(expectedValueLiteral);
      });

      it('should have the property excludedSegmentOptions (base name: "excludedSegmentOptions")', function() {
        // TODO: update the code to test the property excludedSegmentOptions
        expect(instance).to.have.property('excludedSegmentOptions');
        // expect(instance.excludedSegmentOptions).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property includedSegmentOptions (base name: "includedSegmentOptions")', function() {
        // TODO: update the code to test the property includedSegmentOptions
        expect(instance).to.have.property('includedSegmentOptions');
        // expect(instance.includedSegmentOptions).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property preferredTimeCondition (base name: "preferredTimeCondition")', function() {
        // TODO: update the code to test the property preferredTimeCondition
        expect(instance).to.have.property('preferredTimeCondition');
        // expect(instance.preferredTimeCondition).to.be(expectedValueLiteral);
      });

      it('should have the property preferredTimezone (base name: "preferredTimezone")', function() {
        // TODO: update the code to test the property preferredTimezone
        expect(instance).to.have.property('preferredTimezone');
        // expect(instance.preferredTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property scheduleCondition (base name: "scheduleCondition")', function() {
        // TODO: update the code to test the property scheduleCondition
        expect(instance).to.have.property('scheduleCondition');
        // expect(instance.scheduleCondition).to.be(expectedValueLiteral);
      });

      it('should have the property scheduleType (base name: "scheduleType")', function() {
        // TODO: update the code to test the property scheduleType
        expect(instance).to.have.property('scheduleType');
        // expect(instance.scheduleType).to.be(expectedValueLiteral);
      });

      it('should have the property sendInContactsTimezone (base name: "sendInContactsTimezone")', function() {
        // TODO: update the code to test the property sendInContactsTimezone
        expect(instance).to.have.property('sendInContactsTimezone');
        // expect(instance.sendInContactsTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property smartSend (base name: "smartSend")', function() {
        // TODO: update the code to test the property smartSend
        expect(instance).to.have.property('smartSend');
        // expect(instance.smartSend).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property strategy (base name: "strategy")', function() {
        // TODO: update the code to test the property strategy
        expect(instance).to.have.property('strategy');
        // expect(instance.strategy).to.be(expectedValueLiteral);
      });

      it('should have the property timeCondition (base name: "timeCondition")', function() {
        // TODO: update the code to test the property timeCondition
        expect(instance).to.have.property('timeCondition');
        // expect(instance.timeCondition).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property trackReply (base name: "trackReply")', function() {
        // TODO: update the code to test the property trackReply
        expect(instance).to.have.property('trackReply');
        // expect(instance.trackReply).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
