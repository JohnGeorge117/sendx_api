/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsContact', function() {
      beforeEach(function() {
        instance = new SendXAppServerV2.ModelsContact();
      });

      it('should create an instance of ModelsContact', function() {
        // TODO: update the code to test ModelsContact
        expect(instance).to.be.a(SendXAppServerV2.ModelsContact);
      });

      it('should have the property contactSource (base name: "ContactSource")', function() {
        // TODO: update the code to test the property contactSource
        expect(instance).to.have.property('contactSource');
        // expect(instance.contactSource).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property LTV (base name: "LTV")', function() {
        // TODO: update the code to test the property LTV
        expect(instance).to.have.property('LTV');
        // expect(instance.LTV).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "Updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property birthday (base name: "birthday")', function() {
        // TODO: update the code to test the property birthday
        expect(instance).to.have.property('birthday');
        // expect(instance.birthday).to.be(expectedValueLiteral);
      });

      it('should have the property blocked (base name: "blocked")', function() {
        // TODO: update the code to test the property blocked
        expect(instance).to.have.property('blocked');
        // expect(instance.blocked).to.be(expectedValueLiteral);
      });

      it('should have the property bounced (base name: "bounced")', function() {
        // TODO: update the code to test the property bounced
        expect(instance).to.have.property('bounced');
        // expect(instance.bounced).to.be(expectedValueLiteral);
      });

      it('should have the property company (base name: "company")', function() {
        // TODO: update the code to test the property company
        expect(instance).to.have.property('company');
        // expect(instance.company).to.be(expectedValueLiteral);
      });

      it('should have the property contactSourceId (base name: "contactSourceId")', function() {
        // TODO: update the code to test the property contactSourceId
        expect(instance).to.have.property('contactSourceId');
        // expect(instance.contactSourceId).to.be(expectedValueLiteral);
      });

      it('should have the property customFields (base name: "custom_fields")', function() {
        // TODO: update the code to test the property customFields
        expect(instance).to.have.property('customFields');
        // expect(instance.customFields).to.be(expectedValueLiteral);
      });

      it('should have the property dropped (base name: "dropped")', function() {
        // TODO: update the code to test the property dropped
        expect(instance).to.have.property('dropped');
        // expect(instance.dropped).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property encryptedId (base name: "encryptedId")', function() {
        // TODO: update the code to test the property encryptedId
        expect(instance).to.have.property('encryptedId');
        // expect(instance.encryptedId).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property pageSource (base name: "page_source")', function() {
        // TODO: update the code to test the property pageSource
        expect(instance).to.have.property('pageSource');
        // expect(instance.pageSource).to.be(expectedValueLiteral);
      });

      it('should have the property spam (base name: "spam")', function() {
        // TODO: update the code to test the property spam
        expect(instance).to.have.property('spam');
        // expect(instance.spam).to.be(expectedValueLiteral);
      });

      it('should have the property trackData (base name: "track_data")', function() {
        // TODO: update the code to test the property trackData
        expect(instance).to.have.property('trackData');
        // expect(instance.trackData).to.be(expectedValueLiteral);
      });

      it('should have the property unsubscribed (base name: "unsubscribed")', function() {
        // TODO: update the code to test the property unsubscribed
        expect(instance).to.have.property('unsubscribed');
        // expect(instance.unsubscribed).to.be(expectedValueLiteral);
      });

    });
  });

}));
