/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsCampaignRequest', function() {
      beforeEach(function() {
        instance = new SendXAppServerV2.ModelsCampaignRequest();
      });

      it('should create an instance of ModelsCampaignRequest', function() {
        // TODO: update the code to test ModelsCampaignRequest
        expect(instance).to.be.a(SendXAppServerV2.ModelsCampaignRequest);
      });

      it('should have the property attachmentIdStr (base name: "attachmentIdStr")', function() {
        // TODO: update the code to test the property attachmentIdStr
        expect(instance).to.have.property('attachmentIdStr');
        // expect(instance.attachmentIdStr).to.be(expectedValueLiteral);
      });

      it('should have the property autogeneratePlainText (base name: "autogeneratePlainText")', function() {
        // TODO: update the code to test the property autogeneratePlainText
        expect(instance).to.have.property('autogeneratePlainText');
        // expect(instance.autogeneratePlainText).to.be(expectedValueLiteral);
      });

      it('should have the property autogenerateUTM (base name: "autogenerateUTM")', function() {
        // TODO: update the code to test the property autogenerateUTM
        expect(instance).to.have.property('autogenerateUTM');
        // expect(instance.autogenerateUTM).to.be(expectedValueLiteral);
      });

      it('should have the property excludedSegmentStr (base name: "excludedSegmentStr")', function() {
        // TODO: update the code to test the property excludedSegmentStr
        expect(instance).to.have.property('excludedSegmentStr');
        // expect(instance.excludedSegmentStr).to.be(expectedValueLiteral);
      });

      it('should have the property fromEmail (base name: "fromEmail")', function() {
        // TODO: update the code to test the property fromEmail
        expect(instance).to.have.property('fromEmail');
        // expect(instance.fromEmail).to.be(expectedValueLiteral);
      });

      it('should have the property fromName (base name: "fromName")', function() {
        // TODO: update the code to test the property fromName
        expect(instance).to.have.property('fromName');
        // expect(instance.fromName).to.be(expectedValueLiteral);
      });

      it('should have the property htmlCode (base name: "htmlCode")', function() {
        // TODO: update the code to test the property htmlCode
        expect(instance).to.have.property('htmlCode');
        // expect(instance.htmlCode).to.be(expectedValueLiteral);
      });

      it('should have the property includedSegmentStr (base name: "includedSegmentStr")', function() {
        // TODO: update the code to test the property includedSegmentStr
        expect(instance).to.have.property('includedSegmentStr');
        // expect(instance.includedSegmentStr).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property plainText (base name: "plainText")', function() {
        // TODO: update the code to test the property plainText
        expect(instance).to.have.property('plainText');
        // expect(instance.plainText).to.be(expectedValueLiteral);
      });

      it('should have the property preferredTimeCondition (base name: "preferredTimeCondition")', function() {
        // TODO: update the code to test the property preferredTimeCondition
        expect(instance).to.have.property('preferredTimeCondition');
        // expect(instance.preferredTimeCondition).to.be(expectedValueLiteral);
      });

      it('should have the property preferredTimezone (base name: "preferredTimezone")', function() {
        // TODO: update the code to test the property preferredTimezone
        expect(instance).to.have.property('preferredTimezone');
        // expect(instance.preferredTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property rss (base name: "rss")', function() {
        // TODO: update the code to test the property rss
        expect(instance).to.have.property('rss');
        // expect(instance.rss).to.be(expectedValueLiteral);
      });

      it('should have the property scheduleCondition (base name: "scheduleCondition")', function() {
        // TODO: update the code to test the property scheduleCondition
        expect(instance).to.have.property('scheduleCondition');
        // expect(instance.scheduleCondition).to.be(expectedValueLiteral);
      });

      it('should have the property scheduleType (base name: "scheduleType")', function() {
        // TODO: update the code to test the property scheduleType
        expect(instance).to.have.property('scheduleType');
        // expect(instance.scheduleType).to.be(expectedValueLiteral);
      });

      it('should have the property sendInContactsTimezone (base name: "sendInContactsTimezone")', function() {
        // TODO: update the code to test the property sendInContactsTimezone
        expect(instance).to.have.property('sendInContactsTimezone');
        // expect(instance.sendInContactsTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property smartSend (base name: "smartSend")', function() {
        // TODO: update the code to test the property smartSend
        expect(instance).to.have.property('smartSend');
        // expect(instance.smartSend).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property templateCode (base name: "templateCode")', function() {
        // TODO: update the code to test the property templateCode
        expect(instance).to.have.property('templateCode');
        // expect(instance.templateCode).to.be(expectedValueLiteral);
      });

      it('should have the property timeCondition (base name: "timeCondition")', function() {
        // TODO: update the code to test the property timeCondition
        expect(instance).to.have.property('timeCondition');
        // expect(instance.timeCondition).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property trackReply (base name: "trackReply")', function() {
        // TODO: update the code to test the property trackReply
        expect(instance).to.have.property('trackReply');
        // expect(instance.trackReply).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
