/*
 * SendX APP Server V2
 * Send App Server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.25
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendXAppServerV2);
  }
}(this, function(expect, SendXAppServerV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsAccount', function() {
      beforeEach(function() {
        instance = new SendXAppServerV2.ModelsAccount();
      });

      it('should create an instance of ModelsAccount', function() {
        // TODO: update the code to test ModelsAccount
        expect(instance).to.be.a(SendXAppServerV2.ModelsAccount);
      });

      it('should have the property accountName (base name: "AccountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property apiKey (base name: "ApiKey")', function() {
        // TODO: update the code to test the property apiKey
        expect(instance).to.have.property('apiKey');
        // expect(instance.apiKey).to.be(expectedValueLiteral);
      });

      it('should have the property avatarUrl (base name: "AvatarUrl")', function() {
        // TODO: update the code to test the property avatarUrl
        expect(instance).to.have.property('avatarUrl');
        // expect(instance.avatarUrl).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "CompanyName")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property contactSize (base name: "ContactSize")', function() {
        // TODO: update the code to test the property contactSize
        expect(instance).to.have.property('contactSize');
        // expect(instance.contactSize).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property currentSendxCredit (base name: "CurrentSendxCredit")', function() {
        // TODO: update the code to test the property currentSendxCredit
        expect(instance).to.have.property('currentSendxCredit');
        // expect(instance.currentSendxCredit).to.be(expectedValueLiteral);
      });

      it('should have the property ecomPlatform (base name: "EcomPlatform")', function() {
        // TODO: update the code to test the property ecomPlatform
        expect(instance).to.have.property('ecomPlatform');
        // expect(instance.ecomPlatform).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "Email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property emailListSource (base name: "EmailListSource")', function() {
        // TODO: update the code to test the property emailListSource
        expect(instance).to.have.property('emailListSource');
        // expect(instance.emailListSource).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "FullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property hubspotCompanyId (base name: "HubspotCompanyId")', function() {
        // TODO: update the code to test the property hubspotCompanyId
        expect(instance).to.have.property('hubspotCompanyId');
        // expect(instance.hubspotCompanyId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property industry (base name: "Industry")', function() {
        // TODO: update the code to test the property industry
        expect(instance).to.have.property('industry');
        // expect(instance.industry).to.be(expectedValueLiteral);
      });

      it('should have the property integration (base name: "Integration")', function() {
        // TODO: update the code to test the property integration
        expect(instance).to.have.property('integration');
        // expect(instance.integration).to.be(expectedValueLiteral);
      });

      it('should have the property isForbid (base name: "IsForbid")', function() {
        // TODO: update the code to test the property isForbid
        expect(instance).to.have.property('isForbid');
        // expect(instance.isForbid).to.be(expectedValueLiteral);
      });

      it('should have the property isUnlocked (base name: "IsUnlocked")', function() {
        // TODO: update the code to test the property isUnlocked
        expect(instance).to.have.property('isUnlocked');
        // expect(instance.isUnlocked).to.be(expectedValueLiteral);
      });

      it('should have the property lang (base name: "Lang")', function() {
        // TODO: update the code to test the property lang
        expect(instance).to.have.property('lang');
        // expect(instance.lang).to.be(expectedValueLiteral);
      });

      it('should have the property leadSource (base name: "LeadSource")', function() {
        // TODO: update the code to test the property leadSource
        expect(instance).to.have.property('leadSource');
        // expect(instance.leadSource).to.be(expectedValueLiteral);
      });

      it('should have the property lifetimeSendxCredit (base name: "LifetimeSendxCredit")', function() {
        // TODO: update the code to test the property lifetimeSendxCredit
        expect(instance).to.have.property('lifetimeSendxCredit');
        // expect(instance.lifetimeSendxCredit).to.be(expectedValueLiteral);
      });

      it('should have the property migratingFrom (base name: "MigratingFrom")', function() {
        // TODO: update the code to test the property migratingFrom
        expect(instance).to.have.property('migratingFrom');
        // expect(instance.migratingFrom).to.be(expectedValueLiteral);
      });

      it('should have the property monthEmails (base name: "MonthEmails")', function() {
        // TODO: update the code to test the property monthEmails
        expect(instance).to.have.property('monthEmails');
        // expect(instance.monthEmails).to.be(expectedValueLiteral);
      });

      it('should have the property onboardingDate (base name: "OnboardingDate")', function() {
        // TODO: update the code to test the property onboardingDate
        expect(instance).to.have.property('onboardingDate');
        // expect(instance.onboardingDate).to.be(expectedValueLiteral);
      });

      it('should have the property onboardingInfoAdded (base name: "OnboardingInfoAdded")', function() {
        // TODO: update the code to test the property onboardingInfoAdded
        expect(instance).to.have.property('onboardingInfoAdded');
        // expect(instance.onboardingInfoAdded).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "Password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property promoCode (base name: "PromoCode")', function() {
        // TODO: update the code to test the property promoCode
        expect(instance).to.have.property('promoCode');
        // expect(instance.promoCode).to.be(expectedValueLiteral);
      });

      it('should have the property rands (base name: "Rands")', function() {
        // TODO: update the code to test the property rands
        expect(instance).to.have.property('rands');
        // expect(instance.rands).to.be(expectedValueLiteral);
      });

      it('should have the property referredByAccount (base name: "ReferredByAccount")', function() {
        // TODO: update the code to test the property referredByAccount
        expect(instance).to.have.property('referredByAccount');
        // expect(instance.referredByAccount).to.be(expectedValueLiteral);
      });

      it('should have the property removeBranding (base name: "RemoveBranding")', function() {
        // TODO: update the code to test the property removeBranding
        expect(instance).to.have.property('removeBranding');
        // expect(instance.removeBranding).to.be(expectedValueLiteral);
      });

      it('should have the property risk (base name: "Risk")', function() {
        // TODO: update the code to test the property risk
        expect(instance).to.have.property('risk');
        // expect(instance.risk).to.be(expectedValueLiteral);
      });

      it('should have the property sendingType (base name: "SendingType")', function() {
        // TODO: update the code to test the property sendingType
        expect(instance).to.have.property('sendingType');
        // expect(instance.sendingType).to.be(expectedValueLiteral);
      });

      it('should have the property showPromoCodeOffer (base name: "ShowPromoCodeOffer")', function() {
        // TODO: update the code to test the property showPromoCodeOffer
        expect(instance).to.have.property('showPromoCodeOffer');
        // expect(instance.showPromoCodeOffer).to.be(expectedValueLiteral);
      });

      it('should have the property tier (base name: "Tier")', function() {
        // TODO: update the code to test the property tier
        expect(instance).to.have.property('tier');
        // expect(instance.tier).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "Timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property topGoal (base name: "TopGoal")', function() {
        // TODO: update the code to test the property topGoal
        expect(instance).to.have.property('topGoal');
        // expect(instance.topGoal).to.be(expectedValueLiteral);
      });

      it('should have the property topProblem (base name: "TopProblem")', function() {
        // TODO: update the code to test the property topProblem
        expect(instance).to.have.property('topProblem');
        // expect(instance.topProblem).to.be(expectedValueLiteral);
      });

      it('should have the property trialPeriod (base name: "TrialPeriod")', function() {
        // TODO: update the code to test the property trialPeriod
        expect(instance).to.have.property('trialPeriod');
        // expect(instance.trialPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "Updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property website (base name: "Website")', function() {
        // TODO: update the code to test the property website
        expect(instance).to.have.property('website');
        // expect(instance.website).to.be(expectedValueLiteral);
      });

    });
  });

}));
